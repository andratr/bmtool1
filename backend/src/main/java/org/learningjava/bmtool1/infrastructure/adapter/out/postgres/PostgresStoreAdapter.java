package org.learningjava.bmtool1.infrastructure.adapter.out.postgres;

import jakarta.annotation.PostConstruct;
import org.learningjava.bmtool1.application.port.ExperimentStorePort;
import org.learningjava.bmtool1.domain.model.Experiment;
import org.springframework.stereotype.Component;

import javax.sql.DataSource;
import java.sql.*;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

@Component
public class PostgresStoreAdapter implements ExperimentStorePort {
    private final DataSource ds;

    public PostgresStoreAdapter(DataSource ds) {
        this.ds = ds;
    }

    private static void bindWithoutId(PreparedStatement ps, Experiment e) throws SQLException {
        ps.setDate(1, Date.valueOf(e.experimentDate()));
        ps.setInt(2, e.numSamples());
        ps.setInt(3, e.numRagSamples());
        ps.setInt(4, e.k());
        ps.setString(5, e.prompt());
        ps.setString(6, e.embeddingModel());
        ps.setString(7, e.llmModel());
        setNullable(ps, 8, e.metric1Ccc());
        setNullable(ps, 9, e.metric2TimeMs());
        setNullable(ps, 10, e.metric3Co2G());
    }

    private static Experiment map(ResultSet rs) throws SQLException {
        return new Experiment(
                rs.getLong("id"),
                rs.getObject("experiment_date", LocalDate.class),
                rs.getInt("num_samples"),
                rs.getInt("num_rag_samples"),
                rs.getInt("k"),
                rs.getString("prompt"),
                rs.getString("embedding_model"),
                rs.getString("llm_model"),
                getNullableDouble(rs, "metric1_ccc"),
                getNullableDouble(rs, "metric2_time_ms"),
                getNullableDouble(rs, "metric3_co2_g")
        );
    }

    private static void setNullable(PreparedStatement ps, int idx, Double v) throws SQLException {
        if (v == null) ps.setNull(idx, Types.DOUBLE);
        else ps.setDouble(idx, v);
    }

    private static Double getNullableDouble(ResultSet rs, String col) throws SQLException {
        double v = rs.getDouble(col);
        return rs.wasNull() ? null : v;
    }

    @PostConstruct
    public void init() {
        ensureSchema();
    }

    @Override
    public void ensureSchema() {
        final String ddl = """
                CREATE TABLE IF NOT EXISTS experiments (
                  id               BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                  experiment_date  DATE NOT NULL,
                  num_samples      INTEGER NOT NULL CHECK (num_samples >= 0),
                  num_rag_samples  INTEGER NOT NULL CHECK (num_rag_samples >= 0 AND num_rag_samples <= num_samples),
                  k                INTEGER NOT NULL CHECK (k > 0),
                  prompt           TEXT NOT NULL,
                  embedding_model  TEXT NOT NULL,
                  llm_model        TEXT NOT NULL,
                  metric1_ccc      DOUBLE PRECISION,
                  metric2_time_ms  DOUBLE PRECISION,
                  metric3_co2_g    DOUBLE PRECISION,
                  created_at       TIMESTAMPTZ NOT NULL DEFAULT now(),
                  updated_at       TIMESTAMPTZ NOT NULL DEFAULT now(),
                  CONSTRAINT uq_experiment_natural
                    UNIQUE (experiment_date, embedding_model, llm_model, k, prompt)
                );
                
                CREATE INDEX IF NOT EXISTS idx_experiments_date
                  ON experiments (experiment_date);
                CREATE INDEX IF NOT EXISTS idx_experiments_models
                  ON experiments (embedding_model, llm_model);
                
                CREATE OR REPLACE FUNCTION set_updated_at() RETURNS trigger AS $$
                BEGIN NEW.updated_at = now(); RETURN NEW; END; $$ LANGUAGE plpgsql;
                
                DROP TRIGGER IF EXISTS trg_set_updated_at ON experiments;
                CREATE TRIGGER trg_set_updated_at
                  BEFORE UPDATE ON experiments
                  FOR EACH ROW EXECUTE FUNCTION set_updated_at();
                """;
        try (Connection c = ds.getConnection(); Statement st = c.createStatement()) {
            st.execute(ddl);
        } catch (SQLException e) {
            throw new RuntimeException("ensureSchema failed", e);
        }
    }

    @Override
    public long upsert(Experiment e) {
        final String sql = """
                  INSERT INTO experiments
                    (experiment_date, num_samples, num_rag_samples, k, prompt,
                     embedding_model, llm_model, metric1_ccc, metric2_time_ms, metric3_co2_g)
                  VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                  ON CONFLICT ON CONSTRAINT uq_experiment_natural DO UPDATE SET
                    num_samples     = EXCLUDED.num_samples,
                    num_rag_samples = EXCLUDED.num_rag_samples,
                    metric1_ccc     = EXCLUDED.metric1_ccc,
                    metric2_time_ms = EXCLUDED.metric2_time_ms,
                    metric3_co2_g   = EXCLUDED.metric3_co2_g
                  RETURNING id
                """;
        try (Connection c = ds.getConnection();
             PreparedStatement ps = c.prepareStatement(sql)) {
            bindWithoutId(ps, e);
            try (ResultSet rs = ps.executeQuery()) {
                if (!rs.next()) throw new SQLException("No id returned from upsert");
                return rs.getLong(1);
            }
        } catch (SQLException ex) {
            throw new RuntimeException("upsert failed", ex);
        }
    }

    @Override
    public List<Long> upsertBatch(List<Experiment> experiments) {
        final String sql = """
                  INSERT INTO experiments
                    (experiment_date, num_samples, num_rag_samples, k, prompt,
                     embedding_model, llm_model, metric1_ccc, metric2_time_ms, metric3_co2_g)
                  VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                  ON CONFLICT ON CONSTRAINT uq_experiment_natural DO UPDATE SET
                    num_samples     = EXCLUDED.num_samples,
                    num_rag_samples = EXCLUDED.num_rag_samples,
                    metric1_ccc     = EXCLUDED.metric1_ccc,
                    metric2_time_ms = EXCLUDED.metric2_time_ms,
                    metric3_co2_g   = EXCLUDED.metric3_co2_g
                  RETURNING id
                """;
        final List<Long> ids = new ArrayList<>(experiments.size());
        try (Connection c = ds.getConnection();
             PreparedStatement ps = c.prepareStatement(sql)) {
            c.setAutoCommit(false);
            for (Experiment e : experiments) {
                bindWithoutId(ps, e);
                try (ResultSet rs = ps.executeQuery()) {
                    if (!rs.next()) throw new SQLException("No id returned from upsertBatch");
                    ids.add(rs.getLong(1));
                }
            }
            c.commit();
            return ids;
        } catch (SQLException ex) {
            throw new RuntimeException("upsertBatch failed", ex);
        }
    }

    @Override
    public Optional<Experiment> findById(long id) {
        final String sql = "SELECT * FROM experiments WHERE id = ?";
        try (Connection c = ds.getConnection(); PreparedStatement ps = c.prepareStatement(sql)) {
            ps.setLong(1, id);
            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) return Optional.of(map(rs));
                return Optional.empty();
            }
        } catch (SQLException ex) {
            throw new RuntimeException("findById failed", ex);
        }
    }

    @Override
    public List<Experiment> listByDateRange(LocalDate fromInclusive, LocalDate toInclusive) {
        final String sql = """
                SELECT * FROM experiments
                WHERE experiment_date BETWEEN ? AND ?
                ORDER BY experiment_date DESC, id DESC
                """;
        try (Connection c = ds.getConnection(); PreparedStatement ps = c.prepareStatement(sql)) {
            ps.setDate(1, Date.valueOf(fromInclusive));
            ps.setDate(2, Date.valueOf(toInclusive));
            try (ResultSet rs = ps.executeQuery()) {
                List<Experiment> out = new ArrayList<>();
                while (rs.next()) out.add(map(rs));
                return out;
            }
        } catch (SQLException ex) {
            throw new RuntimeException("listByDateRange failed", ex);
        }
    }

    @Override
    public List<Experiment> listByModels(String embeddingModel, String llmModel) {
        final String sql = """
                SELECT * FROM experiments
                WHERE embedding_model = ? AND llm_model = ?
                ORDER BY experiment_date DESC, id DESC
                """;
        try (Connection c = ds.getConnection(); PreparedStatement ps = c.prepareStatement(sql)) {
            ps.setString(1, embeddingModel);
            ps.setString(2, llmModel);
            try (ResultSet rs = ps.executeQuery()) {
                List<Experiment> out = new ArrayList<>();
                while (rs.next()) out.add(map(rs));
                return out;
            }
        } catch (SQLException ex) {
            throw new RuntimeException("listByModels failed", ex);
        }
    }
}
