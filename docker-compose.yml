
# -------------------- SECRETS --------------------
secrets:
  openrouter_api_key:
    file: ./secrets/openrouter_api_key
  postgres_password:
    file: ./secrets/postgres_password
  app_db_password:
    file: ./secrets/spring.datasource.password
  app_db_username:
    file: ./secrets/spring.datasource.username

services:
  # -------------------- FRONTEND (PROD) --------------------
  frontend-prod:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: prod
      args:
        FRONTEND_PORT: ${FRONTEND_PORT}
    ports:
      - "${FRONTEND_HOST_PORT}:${FRONTEND_PORT}"
    profiles: [ "prod" ]
    env_file:
      - .env

  # -------------------- FRONTEND (DEV) ---------------------
  frontend-dev:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: dev
      args:
        FRONTEND_PORT: ${FRONTEND_PORT}
    environment:
      NODE_OPTIONS: "--trace-deprecation --trace-warnings"
      DEBUG: "vite:*,http-proxy*"
      BACKEND_SERVICE: "backend-dev"
      BACKEND_PORT: "${BACKEND_PORT}"
      FRONTEND_PORT: "${FRONTEND_PORT}"
    command: sh -lc "npm run start"
    ports:
      - "${FRONTEND_HOST_PORT}:${FRONTEND_PORT}"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    profiles: [ "dev" ]
    env_file:
      - .env

  # -------------------- BACKEND (PROD) ---------------------
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: prod
    environment:
      SERVER_PORT: "${BACKEND_PORT}"
      OLLAMA_BASE_URL: "http://ollama:${OLLAMA_PORT}"
      WEAVIATE_URL: "http://weaviate:${WEAVIATE_PORT}"
      OPENROUTER_API_KEY_FILE: "/run/secrets/openrouter_api_key"
      SCHEMA_SYNC_ENABLED: "true"
      WEAVIATE_CLASS_NAME: "PairChunk"
      INGEST_ON_REPLACE: "true"
      INGEST_ROOT_DIR: "/app/data/pairs"
      # Let Spring read username/password directly from secrets via configtree
      SPRING_CONFIG_IMPORT: "optional:configtree:/run/secrets/"
      SPRING_DATASOURCE_URL: "jdbc:postgresql://db:5432/bmtool"
    secrets:
      - source: openrouter_api_key
        target: openrouter_api_key
      - source: app_db_username
        target: spring.datasource.username
      - source: app_db_password
        target: spring.datasource.password
    volumes:
      - ./files/anon-pairs:/app/data/pairs
      - ../.env:/app/config/app.env.properties:ro
    expose:
      - "${BACKEND_PORT}"
    depends_on:
      weaviate:
        condition: service_healthy
      ollama:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "wget -qO- http://localhost:${BACKEND_PORT}/actuator/health | grep -q UP" ]
      interval: 10s
      timeout: 3s
      retries: 10
    restart: unless-stopped
    profiles: [ "prod" ]
    env_file:
      - .env

  # -------------------- BACKEND (DEV / live reload) --------
  backend-dev:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: dev
    working_dir: /app
    command: mvn -DskipTests spring-boot:run
    environment:
      SERVER_PORT: "${BACKEND_PORT}"
      OLLAMA_BASE_URL: "http://ollama:${OLLAMA_PORT}"
      WEAVIATE_URL: "http://weaviate:${WEAVIATE_PORT}"
      OPENROUTER_API_KEY_FILE: "/run/secrets/openrouter_api_key"
      SCHEMA_SYNC_ENABLED: "true"
      WEAVIATE_CLASS_NAME: "PairChunk"
      INGEST_ON_REPLACE: "true"
      INGEST_ROOT_DIR: "/app/data/pairs"
      SPRING_PROFILES_ACTIVE: "dev"
      JAVA_TOOL_OPTIONS: "-Dspring.devtools.restart.enabled=true"
      # Spring reads DB creds from /run/secrets
      SPRING_CONFIG_IMPORT: "optional:configtree:/run/secrets/"
      SPRING_DATASOURCE_URL: "jdbc:postgresql://db:5432/bmtool"
    ports:
      - "${BACKEND_HOST_DEV_PORT}:${BACKEND_PORT}"
    secrets:
      - source: openrouter_api_key
        target: openrouter_api_key
      - source: app_db_username
        target: spring.datasource.username
      - source: app_db_password
        target: spring.datasource.password
    volumes:
      - ./backend:/app
      - ./files/anon-pairs:/app/data/pairs
      - ~/.m2:/root/.m2
      - ../.env:/app/config/app.env.properties:ro
    depends_on:
      weaviate:
        condition: service_healthy
      ollama:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "wget -qO- http://localhost:${BACKEND_PORT}/actuator/health | grep -q UP || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 30
    restart: unless-stopped
    profiles: [ "dev" ]
    env_file:
      - .env

  # -------------------- WEAVIATE ----------------------------
  weaviate:
    image: semitechnologies/weaviate:1.25.7
    environment:
      QUERY_DEFAULTS_LIMIT: 200
      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: 'true'
      PERSISTENCE_DATA_PATH: '/var/lib/weaviate'
      DEFAULT_VECTORIZER_MODULE: 'none'
      ENABLE_MODULES: ''
      CLUSTER_HOSTNAME: 'node1'
      ENABLE_SCHEMA_AUTO_CREATE: 'true'
      HTTP_PORT: "${WEAVIATE_PORT}"
    ports:
      - "${WEAVIATE_HOST_DEV_PORT}:${WEAVIATE_PORT}"
    volumes:
      - weaviate_data:/var/lib/weaviate
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "wget -qO- http://localhost:${WEAVIATE_PORT}/v1/.well-known/ready >/dev/null 2>&1 || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 20

  # -------------------- OLLAMA ------------------------------
  ollama:
    build: ./ollama
    expose:
      - "${OLLAMA_PORT}"
    volumes:
      - ollama_data:/root/.ollama
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "ollama list >/dev/null 2>&1 || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 30

  # -------------------- POSTGRESQL -------------------------
  db:
    image: postgres:16
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: bmtool
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
    # Map host port to container's 5432; default host port is 5432 if not set
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    secrets:
      - source: postgres_password
        target: postgres_password

volumes:
  weaviate_data: {}
  ollama_data: {}
  pgdata: {}
